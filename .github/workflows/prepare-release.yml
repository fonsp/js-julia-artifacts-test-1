name: Bundle & upload tarball & update Artifacts.toml
on:
  push:
    branches: main
#   workflow_dispatch:
#     inputs:
#       name:
#         description: 'Person to greet'
#         default: 'World'
#         required: true

jobs:
  bundle:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - uses: denoland/setup-deno@v1
      with:
        deno-version: v1.x

    - name: .julia cache
      uses: actions/cache@v2
      with:
        path: ~/.julia
        key: ${{ runner.os }}-dotjulia-v1-${{ github.run_id }}
        restore-keys: |
            ${{ runner.os }}-dotjulia-v1

    - uses: julia-actions/setup-julia@v1
      with:
        version: '1.7'
    
    - name: üì¶ Run bundler
      run: sh bundle_frontend.sh
    
    - name: üì¶ Archive tar
      # https://unix.stackexchange.com/questions/346789/compressing-two-identical-folders-give-different-result
      run: tar --mtime='1970-01-01 00:00:00' --sort=name --numeric-owner -czf frontend-dist.tar.gz frontend-dist
      
    # - name: SHA256 hash
    #   id: sha256
    #   run: |
    #     echo "::set-output name=result::$(sha256sum frontend-dist.tar.gz | awk '{ print $1 }')\n"
    
    # - run: echo ${{ steps.sha256.outputs.result }}
    
    # - uses: actions/upload-artifact@v2
    #   with:
    #     path: frontend-dist.tar.gz
      
#     - name: View context attributes
#       uses: actions/github-script@v6
#       with:
#         script: |
#           console.log(context)
          
    - name: üåê Create release and upload tarball
      id: release
      uses: actions/github-script@v6
      with:
        github-token: ${{secrets.PAT_TOKEN}}
        script: |
          const fs = require('fs');
          
          let create_result = await github.rest.repos.createRelease({
            owner: "fonsp",
            repo: "js-julia-artifacts-test-2",
            tag_name: `hello-from-${context.sha}`,
          })
          
          let upload_result = await github.rest.repos.uploadReleaseAsset({
            url: create_result.data.upload_url,
            headers: {
              "content-type": "application/gzip"
            },
            data: fs.readFileSync(`frontend-dist.tar.gz`),
            name: `frontend-dist.tar.gz`,
          });
          
          return upload_result.data.browser_download_url
        result-encoding: string

    # Ignore the build changes from previous run.
    # This "just" hard resets to the latest commit on main.
    # The previous bundle commit will still exist, but will be "dangling", unless we made a tag for it.
    # Github will eventually clean dangling commits, which is fine because again, the ones with a tag will stay around.
    - name: Run git checkout main-bundled
      run: |
          git checkout -b main-bundled
          git reset --hard $GITHUB_SHA
    
    - run: git reset --hard
    - uses: fregante/setup-git-user@v1
    
    - name: üìù Update Artifacts.toml
      env:
        download_url: ${{ steps.release.outputs.result }}
      run: |
        julia -e '
        import Pkg
        Pkg.add([
          Pkg.PackageSpec(name="ArtifactUtils", version="0.2.1"),
          # Pkg.PackageSpec(name="JSON", version="0.21.3"),
          # Pkg.PackageSpec(name="GitHubActions", version="0.1.4"),
        ])
        using ArtifactUtils
        artifact_url = ENV["download_url"]
        
        add_artifact!(
            "Artifacts.toml",
            "bundle",
            @show(artifact_url),
            force=true,
        )
        '

    - name: üì§ Push new Artifacts.toml to main-bundled
      id: push
      run: |
          git add Artifacts.toml --force
          git commit -m "$GITHUB_WORKFLOW" -m "Built from hash $GITHUB_SHA"
          git push origin main-bundled --force
          echo "::set-output name=commit_sha::$(git rev-parse HEAD))')"

    - run: echo ${{ steps.push.outputs.commit_sha }}
